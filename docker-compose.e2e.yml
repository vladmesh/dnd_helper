services:
  postgres:
    image: postgres:16-alpine
    env_file:
      - .env.e2e
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 12
    volumes:
      - postgres_e2e_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 12
    volumes:
      - redis_e2e_data:/data

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    env_file:
      - .env.e2e
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_JSON=${LOG_JSON:-true}
      - LOG_SERVICE_NAME=api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python -m dnd_helper_api.main
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import sys, urllib.request;\ntry: resp = urllib.request.urlopen('http://localhost:8000/health', timeout=2)\nexcept Exception: sys.exit(1)\nelse: sys.exit(0 if resp.status == 200 else 1)\"",
        ]
      interval: 5s
      timeout: 5s
      retries: 24

  e2e-tests:
    image: python:3.11-slim
    working_dir: /workspace
    volumes:
      - .:/workspace
    env_file:
      - .env.e2e
    environment:
      - API_BASE_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    command: >-
      bash -c "pip install --no-cache-dir -r tests/e2e/requirements.txt && pytest tests/e2e"

volumes:
  postgres_e2e_data:
  redis_e2e_data: