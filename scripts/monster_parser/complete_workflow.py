#!/usr/bin/env python3
import os
import time
import json
from update_monsters_json import MonsterDataUpdater
from git_operations import GitOperations

def wait_for_parsing_completion():
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    parsed_file = "/home/ubuntu/parsed_monsters_final.json"
    
    while True:
        if os.path.exists(parsed_file):
            try:
                with open(parsed_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
                if isinstance(data, dict) and 'monsters' in data:
                    monster_count = len(data['monsters'])
                    if monster_count > 100:  # –û–∂–∏–¥–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤
                        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {monster_count} –º–æ–Ω—Å—Ç—Ä–æ–≤")
                        return True, parsed_file
                
            except (json.JSONDecodeError, KeyError):
                pass
        
        print("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –∂–¥—É 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)

def analyze_parsing_results(parsed_file):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    
    with open(parsed_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    monsters = data.get('monsters', [])
    errors = data.get('errors', [])
    
    print(f"  –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: {len(monsters)}")
    print(f"  –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {data.get('success_rate', 0):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    with_names = sum(1 for m in monsters if m.get('name'))
    with_english_names = sum(1 for m in monsters if m.get('english_name'))
    with_descriptions = sum(1 for m in monsters if m.get('description'))
    
    print(f"  –° —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {with_names}/{len(monsters)} ({with_names/len(monsters)*100:.1f}%)")
    print(f"  –° –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {with_english_names}/{len(monsters)} ({with_english_names/len(monsters)*100:.1f}%)")
    print(f"  –° –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {with_descriptions}/{len(monsters)} ({with_descriptions/len(monsters)*100:.1f}%)")
    
    return {
        'total_monsters': len(monsters),
        'total_errors': len(errors),
        'success_rate': data.get('success_rate', 0),
        'with_names': with_names,
        'with_english_names': with_english_names,
        'with_descriptions': with_descriptions
    }

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û WORKFLOW –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–û–ù–°–¢–†–û–í")
    print("=" * 60)
    
    # –®–∞–≥ 1: –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    parsing_completed, parsed_file = wait_for_parsing_completion()
    if not parsing_completed:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return
    
    # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
    stats = analyze_parsing_results(parsed_file)
    
    # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JSON —Ñ–∞–π–ª
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞...")
    
    original_json = "/home/ubuntu/dnd_helper/seed_data_monsters.json"
    output_json = "/home/ubuntu/seed_data_monsters_updated.json"
    
    updater = MonsterDataUpdater(original_json, parsed_file)
    update_success = updater.run_update(output_json)
    
    if not update_success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å JSON —Ñ–∞–π–ª")
        return
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    stats_message = f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['total_monsters']} –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {stats['success_rate']:.1f}%
- –ú–æ–Ω—Å—Ç—Ä—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {stats['with_names']}
- –ú–æ–Ω—Å—Ç—Ä—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {stats['with_descriptions']}

–ò—Å—Ç–æ—á–Ω–∏–∫: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ dnd.su/bestiary/"""
    
    # –®–∞–≥ 5: –í—ã–ø–æ–ª–Ω—è–µ–º git –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\nüåø –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ git –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    git_ops = GitOperations()
    git_success, pr_url = git_ops.run_full_workflow(output_json, stats_message)
    
    if git_success:
        print(f"\nüéâ WORKFLOW –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ JSON —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print(f"üîó Pull Request —Å–æ–∑–¥–∞–Ω: {pr_url}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['total_monsters']} –º–æ–Ω—Å—Ç—Ä–æ–≤")
        print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ git –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
        print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {output_json}")

if __name__ == "__main__":
    main()

