#!/usr/bin/env python3
from filtered_mass_parser import FilteredMassParser

def main():
    print("üöÄ –ó–ê–ü–£–°–ö CORE –ü–ê–†–°–ò–ù–ì–ê (—Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Core –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–≤–∫–ª—é—á–∞—è MPMM)
    core_sources = [
        '',      # Basic Rules (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
        'MM',    # Monster Manual
        'PHB',   # Player's Handbook
        'DMG',   # Dungeon Master's Guide
        'SRD',   # System Reference Document
        'MPMM'   # Mordenkainen Presents: Monsters of the Multiverse
    ]
    
    print("üéØ Core –∏—Å—Ç–æ—á–Ω–∏–∫–∏:")
    for source in core_sources:
        source_name = {
            '': 'Basic Rules (–±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)',
            'MM': 'Monster Manual',
            'PHB': "Player's Handbook",
            'DMG': "Dungeon Master's Guide", 
            'SRD': 'System Reference Document',
            'MPMM': 'Mordenkainen Presents: Monsters of the Multiverse'
        }.get(source, source)
        print(f"  - {source or '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞'}: {source_name}")
    
    print("\n" + "=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    parser = FilteredMassParser(allowed_sources=core_sources)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 20 Core –º–æ–Ω—Å—Ç—Ä–æ–≤")
    final_file, results, errors = parser.run_filtered_parsing(test_mode=True)
    
    if results:
        print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(results)} Core –º–æ–Ω—Å—Ç—Ä–æ–≤")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {final_file}")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        print(f"\nü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö Core –º–æ–Ω—Å—Ç—Ä–æ–≤? (y/n)")
        # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        continue_full = True
        
        if continue_full:
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ Core –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            final_file_full, results_full, errors_full = parser.run_filtered_parsing(test_mode=False)
            
            if results_full:
                print(f"\nüéâ –ü–û–õ–ù–´–ô CORE –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results_full)} Core –º–æ–Ω—Å—Ç—Ä–æ–≤")
                print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors_full)}")
                print(f"üìÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {final_file_full}")
                
                return final_file_full, results_full, errors_full
            else:
                print(f"\nüòû –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return None, [], []
        else:
            return final_file, results, errors
    else:
        print(f"\nüòû –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return None, [], []

if __name__ == "__main__":
    main()

