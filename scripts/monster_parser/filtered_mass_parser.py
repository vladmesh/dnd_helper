#!/usr/bin/env python3
from dnd_su_parser_v3 import DnDSuParserV3
import json
import time
import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin

class FilteredMassParser(DnDSuParserV3):
    def __init__(self, allowed_sources=None):
        super().__init__()
        self.delay = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if allowed_sources is None:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ Core –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            self.allowed_sources = {
                '',      # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (Basic Rules)
                'MM',    # Monster Manual
                'PHB',   # Player's Handbook
                'DMG',   # Dungeon Master's Guide
                'SRD',   # System Reference Document
                'MPMM'   # Mordenkainen Presents: Monsters of the Multiverse (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π MM)
            }
        else:
            self.allowed_sources = set(allowed_sources)
        
        print(f"üéØ –§–∏–ª—å—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sorted(self.allowed_sources)}")
    
    def is_allowed_source(self, source):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫"""
        if not source:
            source = ''  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –º–æ–Ω—Å—Ç—Ä–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        return source in self.allowed_sources
    
    def get_filtered_monster_links(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
        
        try:
            response = self.session.get(self.bestiary_url)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤
            all_monster_links = []
            filtered_monster_links = []
            
            for link in soup.find_all('a', href=True):
                href = link.get('href')
                text = link.get_text(strip=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–∞
                if (href and '/bestiary/' in href and 
                    text and re.match(r'^\[.*\]', text)):
                    
                    full_url = urljoin(self.base_url, href)
                    
                    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    if not any(m['url'] == full_url for m in all_monster_links):
                        all_monster_links.append({
                            'name': text,
                            'url': full_url
                        })
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_monster_links)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤")
            print("–ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            for i, monster_link in enumerate(all_monster_links):
                if (i + 1) % 100 == 0:
                    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {i + 1}/{len(all_monster_links)} –º–æ–Ω—Å—Ç—Ä–æ–≤...")
                
                # –ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–Ω—Å—Ç—Ä–∞
                try:
                    response = self.session.get(monster_link['url'])
                    response.raise_for_status()
                    
                    soup = BeautifulSoup(response.content, 'html.parser')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    source = ''
                    h2_tags = soup.find_all('h2')
                    for h2 in h2_tags:
                        h2_text = h2.get_text(strip=True)
                        bracket_match = re.search(r'\]\s*([A-Z]{2,5})\s*$', h2_text)
                        if bracket_match:
                            source = bracket_match.group(1)
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫
                    if self.is_allowed_source(source):
                        filtered_monster_links.append({
                            'name': monster_link['name'],
                            'url': monster_link['url'],
                            'source': source
                        })
                        print(f"‚úÖ {monster_link['name']} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source or '–ù–µ—Ç'})")
                    else:
                        print(f"‚ùå {monster_link['name']} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}) - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    time.sleep(0.2)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {monster_link['name']}: {e}")
                    continue
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
            print(f"  –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: {len(all_monster_links)}")
            print(f"  –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä: {len(filtered_monster_links)}")
            print(f"  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(all_monster_links) - len(filtered_monster_links)}")
            print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç Core: {(len(filtered_monster_links)/len(all_monster_links)*100):.1f}%")
            
            return filtered_monster_links
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤: {e}")
            return []
    
    def parse_monsters_batch(self, monster_links, start_index=0, batch_size=25):
        """–ü–∞—Ä—Å–∏—Ç –ø–∞—Ä—Ç–∏—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤"""
        end_index = min(start_index + batch_size, len(monster_links))
        batch = monster_links[start_index:end_index]
        
        print(f"\n–ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä—Ç–∏–∏ {start_index+1}-{end_index} –∏–∑ {len(monster_links)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤...")
        
        results = []
        errors = []
        
        for i, monster_link in enumerate(batch):
            global_index = start_index + i + 1
            source_info = f" ({monster_link.get('source', '–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞')})"
            print(f"[{global_index}/{len(monster_links)}] {monster_link['name']}{source_info}")
            
            try:
                monster_data = self.parse_monster_page(monster_link['url'])
                
                if monster_data and monster_data.get('name'):
                    results.append(monster_data)
                    print(f"‚úÖ {monster_data['name']} ({monster_data.get('english_name', '–±–µ–∑ –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞–Ω–∏—è')})")
                else:
                    errors.append({
                        'url': monster_link['url'],
                        'name': monster_link['name'],
                        'error': '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ'
                    })
                    print(f"‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
            except Exception as e:
                errors.append({
                    'url': monster_link['url'],
                    'name': monster_link['name'],
                    'error': str(e)
                })
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(batch) - 1:
                time.sleep(self.delay)
        
        return results, errors
    
    def run_filtered_parsing(self, test_mode=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ Core –∏—Å—Ç–æ—á–Ω–∏–∫–∏)")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤
        monster_links = self.get_filtered_monster_links()
        
        if not monster_links:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤")
            return None, [], []
        
        if test_mode:
            print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö 20 –º–æ–Ω—Å—Ç—Ä–æ–≤")
            monster_links = monster_links[:20]
        
        all_results = []
        all_errors = []
        batch_size = 25
        
        # –ü–∞—Ä—Å–∏–º –ø–æ –ø–∞—Ä—Ç–∏—è–º
        for start_idx in range(0, len(monster_links), batch_size):
            batch_num = (start_idx // batch_size) + 1
            
            batch_results, batch_errors = self.parse_monsters_batch(
                monster_links, start_idx, batch_size
            )
            
            all_results.extend(batch_results)
            all_errors.extend(batch_errors)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            suffix = f"_filtered_batch_{batch_num}"
            self.save_results(all_results, all_errors, suffix)
            
            print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(all_results)} –∏–∑ {len(monster_links)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏
            if start_idx + batch_size < len(monster_links):
                time.sleep(2)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        final_file = self.save_results(all_results, all_errors, "_filtered_final")
        
        print(f"\nüéâ –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_results)} Core –º–æ–Ω—Å—Ç—Ä–æ–≤")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(all_errors)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(len(all_results) / len(monster_links)) * 100:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        self.analyze_data_quality(all_results)
        
        return final_file, all_results, all_errors
    
    def save_results(self, all_results, all_errors, suffix):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º"""
        full_data = {
            'monsters': all_results,
            'errors': all_errors,
            'total_parsed': len(all_results),
            'total_errors': len(all_errors),
            'success_rate': (len(all_results) / (len(all_results) + len(all_errors))) * 100 if (len(all_results) + len(all_errors)) > 0 else 0,
            'allowed_sources': list(self.allowed_sources)
        }
        
        filename = f'/home/ubuntu/parsed_monsters{suffix}.json'
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(full_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        return filename
    
    def analyze_data_quality(self, results):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not results:
            return
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö ({len(results)} Core –º–æ–Ω—Å—Ç—Ä–æ–≤):")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        key_fields = {
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'english_name': '–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', 
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'source': '–ò—Å—Ç–æ—á–Ω–∏–∫',
            'armor_class': '–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞',
            'hit_points': '–•–∏—Ç—ã',
            'challenge_rating': '–û–ø–∞—Å–Ω–æ—Å—Ç—å'
        }
        
        for field, field_name in key_fields.items():
            filled = sum(1 for m in results if m.get(field) and str(m[field]).strip())
            percentage = (filled / len(results)) * 100
            print(f"  {field_name}: {filled}/{len(results)} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for monster in results:
            source = monster.get('source', '–ë–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞')
            sources[source] = sources.get(source, 0) + 1
        
        print(f"\nüìö –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, count in sorted(sources.items(), key=lambda x: x[1], reverse=True):
            print(f"  {source or '–ë–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞'}: {count} –º–æ–Ω—Å—Ç—Ä–æ–≤")

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    core_sources = ['', 'MM', 'PHB', 'DMG', 'SRD']  # –ë–µ–∑ MPMM –ø–æ–∫–∞
    
    parser = FilteredMassParser(allowed_sources=core_sources)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    final_file, results, errors = parser.run_filtered_parsing(test_mode=True)
    
    if results:
        print(f"\n‚ú® –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {final_file}")
    else:
        print(f"\nüòû –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

if __name__ == "__main__":
    main()

