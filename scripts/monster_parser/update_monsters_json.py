#!/usr/bin/env python3
import json
import re
from difflib import SequenceMatcher

class MonsterDataUpdater:
    def __init__(self, original_json_path, parsed_data_path):
        self.original_json_path = original_json_path
        self.parsed_data_path = parsed_data_path
        self.original_monsters = []
        self.parsed_monsters = []
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –∏ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("–ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π JSON —Ñ–∞–π–ª...")
        with open(self.original_json_path, 'r', encoding='utf-8') as f:
            self.original_monsters = json.load(f)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.original_monsters)} –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        
        print("–ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        with open(self.parsed_data_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, dict) and 'monsters' in data:
                self.parsed_monsters = data['monsters']
            else:
                self.parsed_monsters = data
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.parsed_monsters)} –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    
    def normalize_name(self, name):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not name:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized = re.sub(r'[^\w\s]', '', str(name).lower())
        normalized = re.sub(r'\s+', ' ', normalized).strip()
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã/–ø—Ä–µ—Ñ–∏–∫—Å—ã
        normalized = re.sub(r'\s*(–∏–º–µ–Ω–Ω–æ–π\s*–Ω–∏–ø|–∏)$', '', normalized)
        
        return normalized
    
    def similarity(self, a, b):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Å—Ç—Ä–æ–∫"""
        return SequenceMatcher(None, a, b).ratio()
    
    def find_matching_monster(self, original_monster):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        best_match = None
        best_score = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
        search_names = []
        
        # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if original_monster.get('name'):
            search_names.append(self.normalize_name(original_monster['name']))
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if original_monster.get('english_name'):
            search_names.append(self.normalize_name(original_monster['english_name']))
        
        # Slug –∏–∑ URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if original_monster.get('slug'):
            search_names.append(self.normalize_name(original_monster['slug']))
        
        # –ò—â–µ–º —Å—Ä–µ–¥–∏ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
        for parsed_monster in self.parsed_monsters:
            parsed_names = []
            
            # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if parsed_monster.get('name'):
                parsed_names.append(self.normalize_name(parsed_monster['name']))
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if parsed_monster.get('english_name'):
                parsed_names.append(self.normalize_name(parsed_monster['english_name']))
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            for search_name in search_names:
                for parsed_name in parsed_names:
                    if search_name and parsed_name:
                        score = self.similarity(search_name, parsed_name)
                        if score > best_score and score > 0.7:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 70%
                            best_score = score
                            best_match = parsed_monster
        
        return best_match, best_score
    
    def is_english_text(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–º"""
        if not text:
            return False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        latin_chars = len(re.findall(r'[a-zA-Z]', text))
        cyrillic_chars = len(re.findall(r'[–∞-—è–ê-–Ø—ë–Å]', text))
        
        # –ï—Å–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –±–æ–ª—å—à–µ, —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
        return latin_chars > cyrillic_chars
    
    def needs_update(self, original_monster):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–æ–Ω—Å—Ç—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name = original_monster.get('name', '')
        if not name or self.is_english_text(name):
            return True, 'name'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = original_monster.get('description', '')
        if not description or self.is_english_text(description):
            return True, 'description'
        
        return False, None
    
    def update_monster_data(self, original_monster, parsed_monster):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–Ω—Å—Ç—Ä–∞"""
        updated = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not original_monster.get('name') or self.is_english_text(original_monster.get('name', '')):
            if parsed_monster.get('name'):
                original_monster['name'] = parsed_monster['name']
                updated = True
                print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: {parsed_monster['name']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not original_monster.get('description') or self.is_english_text(original_monster.get('description', '')):
            if parsed_monster.get('description'):
                original_monster['description'] = parsed_monster['description']
                updated = True
                print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(parsed_monster['description'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not original_monster.get('english_name') and parsed_monster.get('english_name'):
            original_monster['english_name'] = parsed_monster['english_name']
            updated = True
            print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {parsed_monster['english_name']}")
        
        return updated
    
    def process_updates(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤"""
        print("\n–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        total_updated = 0
        total_needs_update = 0
        not_found = 0
        
        for i, original_monster in enumerate(self.original_monsters):
            if (i + 1) % 100 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(self.original_monsters)} –º–æ–Ω—Å—Ç—Ä–æ–≤...")
            
            needs_update, field = self.needs_update(original_monster)
            if not needs_update:
                continue
            
            total_needs_update += 1
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
            matched_monster, score = self.find_matching_monster(original_monster)
            
            if matched_monster:
                print(f"\n[{i+1}] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f}):")
                print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π: {original_monster.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"  –ù–∞–π–¥–µ–Ω–Ω—ã–π: {matched_monster.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                if self.update_monster_data(original_monster, matched_monster):
                    total_updated += 1
            else:
                not_found += 1
                print(f"\n[{i+1}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è: {original_monster.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
        print(f"  –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: {len(self.original_monsters)}")
        print(f"  –ù—É–∂–¥–∞–ª–∏—Å—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {total_needs_update}")
        print(f"  –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}")
        print(f"  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {not_found}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(total_updated/total_needs_update*100):.1f}%" if total_needs_update > 0 else "N/A")
        
        return total_updated
    
    def save_updated_data(self, output_path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print(f"\n–°–æ—Ö—Ä–∞–Ω—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ {output_path}...")
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(self.original_monsters, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    def run_update(self, output_path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö")
        print("=" * 50)
        
        self.load_data()
        total_updated = self.process_updates()
        
        if total_updated > 0:
            self.save_updated_data(output_path)
            return True
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False

def main():
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    original_json = "/home/ubuntu/dnd_helper/seed_data_monsters.json"
    parsed_data = "/home/ubuntu/parsed_monsters_final.json"  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    output_json = "/home/ubuntu/seed_data_monsters_updated.json"
    
    updater = MonsterDataUpdater(original_json, parsed_data)
    success = updater.run_update(output_json)
    
    if success:
        print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_json}")
    else:
        print(f"\nüòû –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

if __name__ == "__main__":
    main()

