#!/usr/bin/env python3
import subprocess
import os
import json
from datetime import datetime

class GitOperations:
    def __init__(self, repo_path="/home/ubuntu/dnd_helper"):
        self.repo_path = repo_path
        self.branch_name = f"update-monster-translations-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    
    def run_command(self, command, cwd=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        if cwd is None:
            cwd = self.repo_path
        
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                cwd=cwd, 
                capture_output=True, 
                text=True,
                check=True
            )
            return True, result.stdout.strip()
        except subprocess.CalledProcessError as e:
            return False, e.stderr.strip()
    
    def check_git_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        print("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        
        success, output = self.run_command("git status --porcelain")
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {output}")
            return False
        
        if output:
            print("üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
            print(output)
        else:
            print("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è")
        
        return True
    
    def create_branch(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ç–∫—É"""
        print(f"–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ç–∫—É: {self.branch_name}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, output = self.run_command("git checkout main")
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ main: {output}")
            return False
        
        success, output = self.run_command("git pull origin main")
        if not success:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ pull: {output}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
        success, output = self.run_command(f"git checkout -b {self.branch_name}")
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É: {output}")
            return False
        
        print(f"‚úÖ –í–µ—Ç–∫–∞ {self.branch_name} —Å–æ–∑–¥–∞–Ω–∞")
        return True
    
    def replace_monsters_file(self, updated_file_path):
        """–ó–∞–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π"""
        original_file = os.path.join(self.repo_path, "seed_data_monsters.json")
        
        print(f"–ó–∞–º–µ–Ω—è—é {original_file} –Ω–∞ {updated_file_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        success, output = self.run_command(f"cp {updated_file_path} {original_file}")
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {output}")
            return False
        
        print("‚úÖ –§–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω")
        return True
    
    def commit_changes(self, stats_message=""):
        """–ö–æ–º–º–∏—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        print("–ö–æ–º–º–∏—á—É –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å
        success, output = self.run_command("git add seed_data_monsters.json")
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å: {output}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        commit_message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤\n\n{stats_message}"
        
        success, output = self.run_command(f'git commit -m "{commit_message}"')
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç: {output}")
            return False
        
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
        return True
    
    def push_branch(self):
        """–ü—É—à–∏—Ç –≤–µ—Ç–∫—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        print(f"–ü—É—à—É –≤–µ—Ç–∫—É {self.branch_name} –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
        
        success, output = self.run_command(f"git push origin {self.branch_name}")
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—à–∏—Ç—å –≤–µ—Ç–∫—É: {output}")
            return False
        
        print("‚úÖ –í–µ—Ç–∫–∞ –∑–∞–ø—É—à–µ–Ω–∞")
        return True
    
    def create_pull_request(self):
        """–°–æ–∑–¥–∞–µ—Ç pull request —á–µ—Ä–µ–∑ GitHub CLI"""
        print("–°–æ–∑–¥–∞—é pull request...")
        
        pr_title = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤"
        pr_body = """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π –º–æ–Ω—Å—Ç—Ä–æ–≤.

## –ò–∑–º–µ–Ω–µ–Ω–∏—è
- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä—É—Å—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–æ–≤
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ª—É—á–∞–∏, –≥–¥–µ –≤–º–µ—Å—Ç–æ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –±—ã–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ

## –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø—É—Ç–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ dnd.su/bestiary/

## –ü—Ä–æ–≤–µ—Ä–∫–∞
- [x] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
- [x] –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- [x] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤

–ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–≤—å—é –∏ –º–µ—Ä–∂—É."""
        
        success, output = self.run_command(
            f'gh pr create --title "{pr_title}" --body "{pr_body}" --base main --head {self.branch_name}'
        )
        
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å pull request: {output}")
            return False, None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL pull request –∏–∑ –≤—ã–≤–æ–¥–∞
        pr_url = None
        for line in output.split('\n'):
            if 'https://github.com' in line:
                pr_url = line.strip()
                break
        
        print(f"‚úÖ Pull request —Å–æ–∑–¥–∞–Ω: {pr_url}")
        return True, pr_url
    
    def run_full_workflow(self, updated_file_path, stats_message=""):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π workflow: –≤–µ—Ç–∫–∞ -> –∫–æ–º–º–∏—Ç -> push -> PR"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ git workflow")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if not self.check_git_status():
            return False, None
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
        if not self.create_branch():
            return False, None
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
        if not self.replace_monsters_file(updated_file_path):
            return False, None
        
        # –ö–æ–º–º–∏—Ç–∏–º
        if not self.commit_changes(stats_message):
            return False, None
        
        # –ü—É—à–∏–º
        if not self.push_branch():
            return False, None
        
        # –°–æ–∑–¥–∞–µ–º PR
        success, pr_url = self.create_pull_request()
        if not success:
            return False, None
        
        print(f"\nüéâ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üåø –í–µ—Ç–∫–∞: {self.branch_name}")
        print(f"üîó Pull Request: {pr_url}")
        
        return True, pr_url

def main():
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    git_ops = GitOperations()
    
    updated_file = "/home/ubuntu/seed_data_monsters_updated.json"
    stats = "–û–±–Ω–æ–≤–ª–µ–Ω–æ X –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"
    
    success, pr_url = git_ops.run_full_workflow(updated_file, stats)
    
    if success:
        print(f"\n‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"Pull Request: {pr_url}")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ git –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")

if __name__ == "__main__":
    main()

