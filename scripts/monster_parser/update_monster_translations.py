#!/usr/bin/env python3
"""
Script to update Russian translations in the monster_translations section.
Adds CLI parameters and repo-relative defaults for containerized runs.
"""

import json
import re
import argparse
import os


def normalize_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not name:
        return ""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized = re.sub(r'\s+', ' ', name.strip().lower())
    # Normalize Cyrillic yo to ye for robust matching (e -> yo variants)
    normalized = normalized.replace('—ë', '–µ')
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –º–∞—Ä–∫–µ—Ä—ã
    normalized = re.sub(r'[^\w\s]', '', normalized)
    return normalized


def load_data(seed_in_path: str, parsed_in_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    try:
        print("üì• –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π JSON —Ñ–∞–π–ª...")
        with open(seed_in_path, 'r', encoding='utf-8') as f:
            original_data = json.load(f)

        print("üì• –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        with open(parsed_in_path, 'r', encoding='utf-8') as f:
            parsed_data = json.load(f)

        monsters = parsed_data.get('monsters', []) if isinstance(parsed_data, dict) else parsed_data
        return original_data, monsters
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None


def find_empty_russian_translations(original_data):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å –ø—É—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
    monster_translations = original_data.get('monster_translations', [])
    empty_translations = []

    for i, translation in enumerate(monster_translations):
        if translation.get('lang') == 'ru':
            description = translation.get('description', '')
            if not description or description.strip() == '':
                empty_translations.append({
                    'index': i,
                    'monster_slug': translation.get('monster_slug', ''),
                    'name': translation.get('name', ''),
                    'translation': translation
                })

    return empty_translations


def build_en_name_by_slug(original_data):
    """–°—Ç—Ä–æ–∏—Ç —Å–ª–æ–≤–∞—Ä—å monster_slug -> english name –∏–∑ seed (lang='en')."""
    en_by_slug = {}
    for t in original_data.get('monster_translations', []):
        if t.get('lang') == 'en':
            slug = t.get('monster_slug')
            name = t.get('name')
            if slug and name:
                en_by_slug[slug] = name
    return en_by_slug


def find_matches(empty_translations, parsed_monsters, en_name_by_slug=None):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø—É—Å—Ç—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –º–æ–Ω—Å—Ç—Ä–∞–º–∏"""
    matches = []
    en_name_by_slug = en_name_by_slug or {}

    for empty_trans in empty_translations:
        empty_name_norm = normalize_name(empty_trans['name'])
        empty_slug = empty_trans['monster_slug']
        seed_en_norm = normalize_name(en_name_by_slug.get(empty_slug, '')) if empty_slug else ''

        for parsed_monster in parsed_monsters:
            parsed_name_norm = normalize_name(parsed_monster.get('name', ''))
            parsed_english_norm = normalize_name(parsed_monster.get('english_name', ''))

            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if (
                (empty_name_norm and parsed_name_norm and empty_name_norm == parsed_name_norm) or
                (empty_name_norm and parsed_english_norm and empty_name_norm == parsed_english_norm) or
                (seed_en_norm and parsed_name_norm and seed_en_norm == parsed_name_norm) or
                (seed_en_norm and parsed_english_norm and seed_en_norm == parsed_english_norm)
            ):
                matches.append({
                    'empty_translation': empty_trans,
                    'parsed_monster': parsed_monster
                })
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {empty_trans['name']} ({empty_slug}) ‚Üê {parsed_monster.get('name', '')}")
                break

    return matches


def update_translations(original_data, matches, replace_english_names=True):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
    if not matches:
        print("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return 0

    updated_count = 0

    for match in matches:
        empty_trans = match['empty_translation']
        parsed_monster = match['parsed_monster']
        index = empty_trans['index']

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        new_description = parsed_monster.get('description', '')
        if new_description:
            original_data['monster_translations'][index]['description'] = new_description
            updated_count += 1
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è: {empty_trans['name']} ({empty_trans['monster_slug']})")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ)
        current_name = empty_trans['name']
        parsed_name = parsed_monster.get('name', '')
        if replace_english_names and parsed_name and parsed_name != current_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
            if not re.search(r'[–∞-—è—ë]', current_name.lower()):
                original_data['monster_translations'][index]['name'] = parsed_name
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: {current_name} ‚Üí {parsed_name}")

    return updated_count


def save_updated_data(data, output_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False


def main():
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤")
    print("=" * 50)

    parser = argparse.ArgumentParser(description="Update Russian translations in monster_translations using parsed data")
    parser.add_argument('--seed-in', default='/app/seed_data_monsters.json', help='Path to input seed JSON')
    parser.add_argument('--seed-out', default='/app/seed_data_monsters_updated.json', help='Path to output updated seed JSON')
    parser.add_argument('--parsed-in', default='/app/scripts/monster_parser/output/parsed_monsters_filtered_final.json', help='Path to parsed monsters JSON')
    parser.add_argument('--replace-english-names', action='store_true', default=True, help='Replace English names with Russian if detected')
    parser.add_argument('--no-replace-english-names', dest='replace_english_names', action='store_false')
    parser.add_argument('--dry-run', action='store_true', help='Do not write output, only report')
    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    original_data, parsed_monsters = load_data(args.seed_in, args.parsed_in)
    if not original_data or not parsed_monsters:
        return

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(parsed_monsters)} —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤")

    # –ù–∞—Ö–æ–¥–∏–º –ø—É—Å—Ç—ã–µ —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    empty_translations = find_empty_russian_translations(original_data)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(empty_translations)} —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏")

    if not empty_translations:
        print("‚ÑπÔ∏è –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
    for i, trans in enumerate(empty_translations[:10]):
        print(f"{i+1}. {trans['name']} ({trans['monster_slug']})")

    if len(empty_translations) > 10:
        print(f"... –∏ –µ—â–µ {len(empty_translations) - 10} –∑–∞–ø–∏—Å–µ–π")

    # –§–æ–ª–±–µ–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏–∑ seed –ø–æ slug
    en_by_slug = build_en_name_by_slug(original_data)

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    print("\nüîç –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    matches = find_matches(empty_translations, parsed_monsters, en_name_by_slug=en_by_slug)
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    if not matches:
        print("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    updated_count = update_translations(original_data, matches, replace_english_names=args.replace_english_names)

    if updated_count > 0:
        if args.dry_run:
            print(f"\n‚úÖ (dry-run) –ë—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Ñ–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å–∞–Ω")
            return
        if save_updated_data(original_data, args.seed_out):
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("\n‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


if __name__ == "__main__":
    main()

